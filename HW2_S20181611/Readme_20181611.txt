<기초컴퓨터그래픽스 HW2> 20181611 김시은


[구현 내용 요약]
1. 키보드에서 'c' 키를 누르면 화면에 별 모양이 출력된다.
   'c'를 누른 뒤에 'x'키를 누르면 이전 화면으로 돌아가고, 's'를 누르면 초기 화면으로 돌아간다.
2. shift 키를 누른채로 마우스 왼쪽을 클릭하면 배경색과 라인의 색이 바뀌어 나타난다.
   shift 키를 누른채로 마우스 왼쪽에서 손을 떼었을 때 배경과 라인의 색이 원래대로 돌아온다.
3. 마우스 왼쪽 키를 누르면 선이 왼쪽으로 움직인다.
   마찬가지로 마우스 오른쪽 키를 누르면 선이 오른쪽으로 움직인다.


1번)
void display_c(void) {
	glClear(GL_COLOR_BUFFER_BIT);
	glBegin(GL_POLYGON);
	glColor3f(255.0, 255.0, 255.0);

	glVertex3f(0.0, -0.25, 0.0);
	glVertex3f(0.25, -0.4, 0.0);
	glVertex3f(0.15, -0.15, 0.0);
	glVertex3f(0.35, 0.05, 0.0);
	glVertex3f(0.1, 0.05, 0.0);
	glVertex3f(0.0, 0.35, 0.0);
	glVertex3f(-0.1, 0.05, 0.0);
	glVertex3f(-0.35, 0.05, 0.0);
	glVertex3f(-0.15, -0.15, 0.0);
	glVertex3f(-0.25, -0.4, 0.0);

	glEnd();
	glFlush();
}
별모양을 그려주는 display_c 함수를 정의한 뒤, keyboard 함수에서
case 'c':
		glutDisplayFunc(display_c);
		glutPostRedisplay();
		break;
이와같이 glutDisplayFunc(display_c);를 호출해서 c를 누른 경우 별모양이 표시되도록 하였다.

이 상태에서 'x'를 누르면 이전 화면으로 돌아갈 수 있도록
case 'x':
	glutDisplayFunc(display);
	glutPostRedisplay();
	break;
을 추가해 주었다.

그리고 's'를 누른 경우에는 프로그램 실행 초기 상태로 돌아갈 수 있도록 해 주었다.
case 's':
	glutDisplayFunc(display);
	r = 250.0f / 255.0f, g = 128.0f / 255.0f, b = 114.0f / 255.0f;
	r_line = 1.0f, g_line = 1.0f, b_line = 1.0f;
	x1 = -1.0f, x2 = 0.0f;
	fprintf(stdout, "$$$ The new window background color is (%5.3f, %5.3f, %5.3f).\n", r, g, b);
	glutPostRedisplay();
	break;



2번)
mousepress 함수에 변수 iny key;를 선언하고, shift 키가 눌린 상태에서 왼쪽 마우스를 클릭하는 경우 미리 정의해놓은 함수 display_toggle을 통해 선의 색과 배경의 색이 바뀌게 출력해 주었다.
shift 키를 누른 상태에서 왼쪽 마우스를 떼면 다시 원래 배경색과 라인 색으로 돌아오게 되도록 해 주었다.
void mousepress(int button, int state, int x, int y) {
	int key;
	if ((button == GLUT_LEFT_BUTTON) && (state == GLUT_DOWN)) {
		key = glutGetModifiers();
		if (key == GLUT_ACTIVE_SHIFT) {
			glutDisplayFunc(display_toggle);
			glutPostRedisplay();
		}
		else {
			glutDisplayFunc(display_leftmouse);
			fprintf(stdout, "*** The left mouse button was pressed at (%d, %d).\n", x, y);
		}
	}
	else if ((button == GLUT_LEFT_BUTTON) && (state == GLUT_UP)) {
		key = glutGetModifiers();
		if (key == GLUT_ACTIVE_SHIFT) {
			glutDisplayFunc(display);
			glutPostRedisplay();
		}
	}
	else if ((button == GLUT_RIGHT_BUTTON) && (state == GLUT_DOWN)) {
		glutDisplayFunc(display_rightmouse);
		rightbuttonpressed = 1;
	}
	else if ((button == GLUT_RIGHT_BUTTON) && (state == GLUT_UP))
		rightbuttonpressed = 0;
}
여기서 shift 키가 눌려있는지의 여부는 glutGetModifiers() 함수를 통해 구분하였다. 
void display_toggle(void) {
	glClearColor(r_line, g_line, b_line, 1.0f);
	glClear(GL_COLOR_BUFFER_BIT);
	glColor3f(r, g, b);
	glBegin(GL_LINES);
	glVertex2f(x1, 0.0f); glVertex2f(x2, 0.0f);
	glEnd();
	glFlush();
}
display_toggle 함수는 다음과 같다. glClearColor(r_line, g_line, b_line, 1.0f);와 glColor3f(r, g, b);처럼 기존 display 함수에서 r, g, b와 r_line, g_line, b_line 의 위치를 바꿔주었다.
여기서 r_line, g_line, b_line은
float r_line = 1.0f, g_line = 1.0f, b_line = 1.0f;
로 처음에 선언해 준 전역변수이다. 화면에 그려진 라인의 r, g, b 색을 담고있는 변수이다.



3번) 
마우스의 클릭에 따라 라인이 움직이게 하기 위해서
void display_rightmouse(void) {
	glClearColor(r, g, b, 1.0f);
	glClear(GL_COLOR_BUFFER_BIT);
	glColor3f(r_line, g_line, b_line);
	glBegin(GL_LINES);
	x1 = x1 + 0.1;
	x2 = x2 + 0.1;
	glVertex2f(x1, 0.0f); glVertex2f(x2, 0.0f);
	glEnd();
	glFlush();
}

void display_leftmouse(void) {
	glClearColor(r, g, b, 1.0f);
	glClear(GL_COLOR_BUFFER_BIT);
	glColor3f(r_line, g_line, b_line);
	glBegin(GL_LINES);
	x1 = x1 - 0.1;
	x2 = x2 - 0.1;
	glVertex2f(x1, 0.0f); glVertex2f(x2, 0.0f);
	glEnd();
	glFlush();
}
두 함수를 추가해 주었고,
mousepress 함수에서 왼쪽 마우스를 누른 경우, 오른쪽 마우스를 누른 경우에 대해
glutDisplayFunc(display_leftmouse);
glutDisplayFunc(display_rightmouse);
를 각각 추가해 주었다.